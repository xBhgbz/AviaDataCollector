version: '3'

services:

  avia_database:
    image: postgres:16
    container_name: avia_database
    volumes:
      - avia_db_volume:/var/lib/postgresql/data
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
      interval: 15s
      timeout: 15s
      retries: 2

  avia_admin:
    build: avia_admin/.
    container_name: admin
    volumes:
      - ./avia_admin:/app
    env_file:
      - .env
    depends_on:
      - avia_database
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "localhost:8000/admin" ]
      interval: 15s
      timeout: 15s
      retries: 2

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq
    restart: always
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    env_file:
      - .env
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:15672 || exit 1" ]
      interval: 60s
      timeout: 10s
      retries: 5

  redis:
    image: redis
    container_name: redis
    volumes:
      - redis_volume:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  celery_beat:
    build: site_parser/.
    container_name: celery_beat
    command: celery -A src.celery_app beat --loglevel=info
    env_file:
      - .env

  flower:
    build: site_parser/.
    container_name: flower
    command: celery -A src.celery_app flower
    env_file:
      - .env
    depends_on:
      - celery_beat

  site_parser:
    build: site_parser/.
    container_name: site_parser
    command: celery -A src.celery_app worker --loglevel=info -n site_parsing_worker
    restart: always
    volumes:
      - ./site_parser:/app
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - redis
      - celery_beat
      - flower

  neuro_parser:
    build: neuro_parser/.
    container_name: neuro_parser
    restart: always
    volumes:
      - ./neuro_parser:/app
    env_file:
      - .env
    depends_on:
      - rabbitmq

  contract_database:
    image: postgres:16
    container_name: contract_database
    volumes:
      - contract_db_volume:/var/lib/postgresql/data
    restart: always
    environment:
      POSTGRES_DB: ${CONTRACT_DB}
      POSTGRES_USER: ${CONTRACT_POSTGRES_USER}
      POSTGRES_PASSWORD: ${CONTRACT_POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "${CONTRACT_DB}", "-U", "${CONTRACT_POSTGRES_USER}" ]
      interval: 15s
      timeout: 15s
      retries: 2

  contract_service:
    build: ./contract_service
    container_name: contract_service
    volumes:
      - ./contract_service:/app
    restart: always
    env_file:
      - .env
    depends_on:
      - contract_database
      - rabbitmq

volumes:
  avia_db_volume:
  contract_db_volume:
  rabbitmq:
  redis_volume:
